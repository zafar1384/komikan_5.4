diff --git a/drivers/tty/serial/8250/8250_dw.c b/drivers/tty/serial/8250/8250_dw.c
index 51a7d3b19..aaf9f6073 100644
--- a/drivers/tty/serial/8250/8250_dw.c
+++ b/drivers/tty/serial/8250/8250_dw.c
@@ -39,6 +39,8 @@ struct dw8250_data {
 	struct dw8250_port_data	data;
 
 	u8			usr_reg;
+	u8			tx_reg;
+	u8			rx_reg;
 	int			msr_mask_on;
 	int			msr_mask_off;
 	struct clk		*clk;
@@ -47,6 +49,7 @@ struct dw8250_data {
 
 	unsigned int		skip_autocfg:1;
 	unsigned int		uart_16550_compatible:1;
+	unsigned int		adjlcr:1;
 };
 
 static inline struct dw8250_data *to_dw8250_data(struct dw8250_port_data *data)
@@ -79,6 +82,13 @@ static void dw8250_check_lcr(struct uart_port *p, int value)
 {
 	void __iomem *offset = p->membase + (UART_LCR << p->regshift);
 	int tries = 1000;
+	struct dw8250_data *d = p->private_data;
+
+	if(d->adjlcr)
+	{
+		if(value == UART_LCR_WLEN7 || value == UART_LCR_WLEN8)
+			value -= 2;
+	}
 
 	/* Make sure LCR write wasn't ignored */
 	while (tries--) {
@@ -142,11 +152,21 @@ static void dw8250_serial_out38x(struct uart_port *p, int offset, int value)
 		dw8250_check_lcr(p, value);
 }
 
+static int dw_change_offset(struct uart_port *p, int offset)
+{
+	struct dw8250_data *d = p->private_data;
+	if(offset == UART_TX)
+		return d->tx_reg;
+	if(offset == UART_RX)
+		return d->rx_reg;
+	return offset;
+}
 
 static void dw8250_serial_out(struct uart_port *p, int offset, int value)
 {
 	struct dw8250_data *d = to_dw8250_data(p->private_data);
 
+	offset = dw_change_offset(p, offset);
 	writeb(value, p->membase + (offset << p->regshift));
 
 	if (offset == UART_LCR && !d->uart_16550_compatible)
@@ -155,6 +175,7 @@ static void dw8250_serial_out(struct uart_port *p, int offset, int value)
 
 static unsigned int dw8250_serial_in(struct uart_port *p, int offset)
 {
+	offset = dw_change_offset(p, offset);
 	unsigned int value = readb(p->membase + (offset << p->regshift));
 
 	return dw8250_modify_msr(p, offset, value);
@@ -188,6 +209,7 @@ static void dw8250_serial_out32(struct uart_port *p, int offset, int value)
 {
 	struct dw8250_data *d = to_dw8250_data(p->private_data);
 
+	offset = dw_change_offset(p, offset);
 	writel(value, p->membase + (offset << p->regshift));
 
 	if (offset == UART_LCR && !d->uart_16550_compatible)
@@ -196,6 +218,7 @@ static void dw8250_serial_out32(struct uart_port *p, int offset, int value)
 
 static unsigned int dw8250_serial_in32(struct uart_port *p, int offset)
 {
+	offset = dw_change_offset(p, offset);
 	unsigned int value = readl(p->membase + (offset << p->regshift));
 
 	return dw8250_modify_msr(p, offset, value);
@@ -205,6 +228,7 @@ static void dw8250_serial_out32be(struct uart_port *p, int offset, int value)
 {
 	struct dw8250_data *d = to_dw8250_data(p->private_data);
 
+	offset = dw_change_offset(p, offset);
 	iowrite32be(value, p->membase + (offset << p->regshift));
 
 	if (offset == UART_LCR && !d->uart_16550_compatible)
@@ -213,6 +237,7 @@ static void dw8250_serial_out32be(struct uart_port *p, int offset, int value)
 
 static unsigned int dw8250_serial_in32be(struct uart_port *p, int offset)
 {
+       offset = dw_change_offset(p, offset);
        unsigned int value = ioread32be(p->membase + (offset << p->regshift));
 
        return dw8250_modify_msr(p, offset, value);
@@ -358,6 +383,15 @@ static void dw8250_quirks(struct uart_port *p, struct dw8250_data *data)
 			data->skip_autocfg = true;
 		}
 #endif
+		if (of_device_is_compatible(np, "realtek,rtl8197f-uart")) {
+			p->type = PORT_16550A;
+			p->flags = UPF_SKIP_TEST| UPF_FIXED_TYPE;
+			data->tx_reg = 9;
+			data->rx_reg = 9;
+			data->adjlcr=true;
+			data->skip_autocfg = true;
+		}
+
 		if (of_device_is_big_endian(p->dev->of_node)) {
 			p->iotype = UPIO_MEM32BE;
 			p->serial_in = dw8250_serial_in32be;
@@ -426,6 +460,9 @@ static int dw8250_probe(struct platform_device *pdev)
 
 	data->data.dma.fn = dw8250_fallback_dma_filter;
 	data->usr_reg = DW_UART_USR;
+	data->tx_reg = UART_TX;
+	data->rx_reg = UART_RX;
+	data->adjlcr=false;
 	p->private_data = &data->data;
 
 	data->uart_16550_compatible = device_property_read_bool(dev,
@@ -635,6 +672,7 @@ static const struct of_device_id dw8250_of_match[] = {
 	{ .compatible = "cavium,octeon-3860-uart" },
 	{ .compatible = "marvell,armada-38x-uart" },
 	{ .compatible = "renesas,rzn1-uart" },
+	{ .compatible = "realtek,rtl8197f-uart" },
 	{ /* Sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, dw8250_of_match);
